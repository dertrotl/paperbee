# .github/workflows/daily-papers-simple.yml
name: PaperBee Daily Digest Clinic

on:
  schedule:
    - cron: '0 7 * * 1-5'  # Monday-Friday at 7 AM UTC
  workflow_dispatch:

jobs:
  fetch-papers:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install -e .
          
      - name: Create Google credentials file
        run: |
          echo '${{ secrets.GOOGLE_CREDENTIALS_JSON }}' > google-credentials.json
          
      - name: Determine search window
        id: search_days
        run: |
          DAY_OF_WEEK=$(date +%u)
          if [ "$DAY_OF_WEEK" -eq 1 ]; then
            echo "since_days=2" >> $GITHUB_OUTPUT
          else
            echo "since_days=1" >> $GITHUB_OUTPUT
          fi
          
      - name: Run PaperBee Pipeline
        env:
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SPREADSHEET_ID }}
          NCBI_KEY: ${{ secrets.NCBI_API_KEY }}
          GEMINI_KEY: ${{ secrets.GEMINI_API_KEY }}
          SLACK_BOT: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_APP: ${{ secrets.SLACK_APP_TOKEN }}
          PAPERBEE_GROUP_NAME: "Clinic Research"
          PAPERBEE_GROUP_EMOJI: "üè•"
        run: |
          echo "üè• Starting PaperBee Clinic Research Digest"
          echo "üìÖ Search window: ${{ steps.search_days.outputs.since_days }} days"
          echo ""
          
          python3 << 'EOF'
          import yaml
          import os
          import subprocess
          
          # Create comprehensive clinic research config
          config = {
              "GOOGLE_SPREADSHEET_ID": os.environ.get("GOOGLE_SHEET_ID", ""),
              "GOOGLE_CREDENTIALS_JSON": "./google-credentials.json",
              "NCBI_API_KEY": os.environ.get("NCBI_KEY", ""),
              "LOCAL_ROOT_DIR": ".",
              "databases": ["pubmed", "biorxiv"],
              
              # Clinic-focused queries (Single-cell, IBD, Immunology) - OPTIMIZED
              "query_biorxiv": "[single-cell] OR [scRNA-seq] OR [spatial transcriptomics] OR [organoids] OR [IBD] OR [inflammatory bowel disease] OR [Crohn] OR [ulcerative colitis] OR [immunodeficiency] OR [inflammasome] OR [immunology] OR [autoimmune] OR [multiomics] OR [computational biology]",
              
              "query_pubmed_arxiv": "[single-cell RNA sequencing] OR [scRNA-seq] OR [IBD] OR [inflammatory bowel disease] OR [Crohn's disease] OR [ulcerative colitis] OR [immunodeficiency] OR [inflammasome] OR [organoids] OR [multiomics] OR [computational biology] OR [immunology] OR [autoimmune]",
              
              "limit": 600,
              "limit_per_database": 200,
              
              "LLM_FILTERING": True,
              "LLM_PROVIDER": "openai",
              "LANGUAGE_MODEL": "gemini-2.5-flash-lite",
              "OPENAI_API_KEY": os.environ.get("GEMINI_KEY", ""),
              "OPENAI_BASE_URL": "https://generativelanguage.googleapis.com/v1beta/openai/",
              
              "FILTERING_PROMPT": "You are reviewing research papers for a lab focused on single-cell analysis, IBD/immunology, and computational biology. Key interests: single-cell RNA-seq, organoids, inflammatory bowel disease, immunodeficiency, inflammasome biology, and autoimmune diseases. Be INCLUSIVE - if a paper relates to single-cell methods, IBD, immunology, organoids, or computational biology approaches in these areas, it is likely relevant. Answer 'yes' or 'no': Is this paper relevant?",
              
              "SLACK": {
                  "is_posting_on": True,
                  "bot_token": os.environ.get("SLACK_BOT", ""),
                  "channel_id": os.environ.get("SLACK_CHANNEL", ""),
                  "app_token": os.environ.get("SLACK_APP", "")
              },
              "TELEGRAM": {"is_posting_on": False},
              "ZULIP": {"is_posting_on": False}
          }
          
          # Save config
          with open("config_clinic.yml", "w") as f:
              yaml.dump(config, f, default_flow_style=False)
          
          print(f"üè• Clinic Research Configuration:")
          print(f"   üß¨ BioRxiv query: {config['query_biorxiv'][:100]}...")
          print(f"   üìÑ PubMed/ArXiv query: {config['query_pubmed_arxiv'][:100]}...")
          print(f"   üìä Limits: total={config['limit']}, per_db={config['limit_per_database']}")
          print(f"   üóÉÔ∏è Databases: {config['databases']}")
          print(f"   ü§ñ LLM: {config['LANGUAGE_MODEL']}")
          
          # Run PaperBee
          try:
              print(f"\nüöÄ Starting PaperBee for Clinic Research...")
              print(f"üìÖ Search window: ${{ steps.search_days.outputs.since_days }} days")
              
              result = subprocess.run([
                  "paperbee", "post", 
                  "--config", "config_clinic.yml", 
                  "--since", "${{ steps.search_days.outputs.since_days }}"
              ], capture_output=True, text=True, timeout=3000)  # 50 min timeout
              
              print(f"\nüì§ PaperBee output:")
              print("="*60)
              print(result.stdout)
              if result.stderr:
                  print(f"‚ö†Ô∏è Stderr: {result.stderr}")
              print("="*60)
              
              if result.returncode == 0:
                  print(f"‚úÖ Clinic Research completed successfully")
                  
                  # Parse results
                  output_lines = result.stdout.split('\n')
                  paper_count = 0
                  raw_count = 0
                  
                  for line in output_lines:
                      if 'papers selected after filtering' in line.lower():
                          try:
                              paper_count = int(line.split()[0])
                          except:
                              pass
                      elif 'found' in line.lower() and 'articles' in line.lower():
                          try:
                              numbers = [int(s) for s in line.split() if s.isdigit()]
                              if numbers:
                                  raw_count += numbers[0]
                          except:
                              pass
                  
                  print(f"üìà Results: {raw_count} raw papers ‚Üí {paper_count} filtered papers")
                  
              else:
                  print(f"‚ùå Clinic Research failed with return code {result.returncode}")
                  print(f"Error details: {result.stderr}")
                  
          except subprocess.TimeoutExpired:
              print(f"‚è∞ Clinic Research timed out after 50 minutes")
          except Exception as e:
              print(f"üí• Clinic Research error: {str(e)}")
          
          # Clean up
          try:
              os.remove("config_clinic.yml")
          except:
              pass
          
          EOF
          
      - name: Clean up
        if: always()
        run: |
          rm -f google-credentials.json config_clinic.yml
