name: Test LLM Filtering and bioRxiv Fix

on:
  workflow_dispatch:

jobs:
  test-llm-biorxiv:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        
      - name: Install dependencies
        run: |
          poetry install
          # Install requests explicitly for network testing
          poetry run pip install requests
        
      - name: Create dummy Google credentials
        run: |
          echo '{
            "type": "service_account",
            "project_id": "dummy-test-project",
            "private_key_id": "dummy-key-id",
            "private_key": "-----BEGIN PRIVATE KEY-----\nDUMMY_PRIVATE_KEY_FOR_TESTING_ONLY\n-----END PRIVATE KEY-----\n",
            "client_email": "dummy@dummy.iam.gserviceaccount.com",
            "client_id": "dummy-client-id",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token"
          }' > dummy_google_creds.json
        
      - name: Create test config
        run: |
          cat << 'EOF' > test_config.yml
          GOOGLE_SPREADSHEET_ID: "dummy_test_id"
          GOOGLE_CREDENTIALS_JSON: "./dummy_google_creds.json"
          NCBI_API_KEY: "${NCBI_KEY}"
          LOCAL_ROOT_DIR: "."
          databases: ["pubmed", "biorxiv"]
          
          # Test queries - SIMPLE for bioRxiv debugging
          query_biorxiv: "[computational biology]"
          query_pubmed_arxiv: "[computational biology]"
          
          limit: 5
          limit_per_database: 2
          
          # LLM Configuration - DISABLED for debugging
          LLM_FILTERING: false
          
          # DISABLE ALL POSTING - No Google Sheets writing!
          SLACK:
            is_posting_on: false
          TELEGRAM:
            is_posting_on: false
          ZULIP:
            is_posting_on: false
          EOF
    
      - name: Test Network Connectivity to bioRxiv
        run: |
          echo "🌐 Testing Network Connectivity to bioRxiv API"
          echo "=============================================="
          
          # Test DNS resolution
          echo "🔍 DNS Resolution Test:"
          nslookup api.biorxiv.org || echo "❌ DNS resolution failed"
          
          # Test HTTP connectivity
          echo ""
          echo "🔗 HTTP Connectivity Test:"
          curl -I https://api.biorxiv.org/ --max-time 10 || echo "❌ HTTP connection failed"
          
          # Test specific bioRxiv endpoint
          echo ""
          echo "📡 bioRxiv API Endpoint Test:"
          curl -s https://api.biorxiv.org/details/biorxiv/2025-09-20/2025-09-24 --max-time 10 | head -100 || echo "❌ bioRxiv API call failed"
          
          # Test from Python
          echo ""
          echo "🐍 Python HTTP Test:"
          poetry run python -c "
          import requests
          try:
              response = requests.get('https://api.biorxiv.org/', timeout=10)
              print(f'✅ bioRxiv API responded with status: {response.status_code}')
          except Exception as e:
              print(f'❌ Python request failed: {e}')
          " || echo "⚠️ Python test failed, but continuing..."

      - name: Test findpapers bioRxiv directly
        run: |
          # Add debug output for bioRxiv search
          echo ""
          echo "🔍 Debug: Testing findpapers bioRxiv directly..."
          poetry run python -c "
          import findpapers
          import os
          import json
          from datetime import date, timedelta
          
          print('✅ findpapers version:', findpapers.__version__ if hasattr(findpapers, '__version__') else 'unknown')
          
          # Test with same parameters as working local test
          since_date = (date.today() - timedelta(days=1)).strftime('%Y-%m-%d')
          until_date = date.today().strftime('%Y-%m-%d')
          
          print(f'🔍 Testing bioRxiv search from {since_date} to {until_date}')
          print('🔍 Query: [computational biology]')
          print('🔍 Limit: 5, per_database: 2')
          
          try:
              # Clean up any existing file
              if os.path.exists('debug_biorxiv_test.json'):
                  os.remove('debug_biorxiv_test.json')
              
              print('🚀 Calling findpapers.search...')
              findpapers.search(
                  'debug_biorxiv_test.json',
                  '[computational biology]',
                  since_date,
                  until_date,
                  5,    # limit
                  2,    # limit_per_database  
                  ['biorxiv'],
                  verbose=True
              )
              
              print('✅ findpapers.search completed')
              
              if os.path.exists('debug_biorxiv_test.json'):
                  print('📄 JSON file created successfully')
                  with open('debug_biorxiv_test.json') as f:
                      data = json.load(f)
                      papers = data.get('papers', [])
                      print(f'📊 Found {len(papers)} papers in JSON file')
                      
                      if papers:
                          print('🔍 First paper title:', papers[0].get('title', 'NO TITLE')[:100])
                      else:
                          print('⚠️ Papers array is empty')
                          print('📋 Full JSON data:')
                          print(json.dumps(data, indent=2)[:500] + '...' if len(str(data)) > 500 else json.dumps(data, indent=2))
              else:
                  print('❌ No JSON file created by findpapers')
                  print('📁 Files in directory:', os.listdir('.'))
                  
          except Exception as e:
              import traceback
              print(f'❌ findpapers error: {e}')
              print('📋 Full traceback:')
              traceback.print_exc()
          "

      - name: Test LLM and bioRxiv
        env:
          NCBI_KEY: ${{ secrets.NCBI_API_KEY }}
          GEMINI_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "🧪 Testing LLM Filtering and bioRxiv Fix"
          echo "📅 Search window: 1 day back"
          echo ""
          
          echo "✅ Test config created"
          echo "🎯 Testing LLM filtering and bioRxiv dual-date system..."
          
          # Run the full test
          echo ""
          echo "🚀 Running full PaperBee test..."
          poetry run paperbee post --config test_config.yml --since 1
          
      - name: Clean up
        if: always()
        run: |
          rm -f dummy_google_creds.json test_config.yml